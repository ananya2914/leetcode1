{"version":3,"file":"content.js","mappings":";;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,SAAS;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,uEAAuE,SAAS;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,SAAS;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,SAAS;AAC7E;AACA;AACA;AACA;AACA,4DAA4D,kBAAkB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA,sDAAsD,KAAK;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,4CAA4C;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,SAAS;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,SAAS;AAC7E;AACA;AACA;AACA;AACA,+EAA+E,SAAS;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,sBAAsB,gCAAgC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA","sources":["webpack://leet-track-extension/./src/content.ts"],"sourcesContent":["\"use strict\";\n// Convert difficulty to proper case\nconst difficultyMap = {\n    'easy': 'Easy',\n    'medium': 'Medium',\n    'hard': 'Hard'\n};\n// Function to show success message\nfunction showSuccessMessage(message) {\n    const successMessage = document.createElement('div');\n    successMessage.textContent = message;\n    successMessage.style.cssText = `\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: #4CAF50;\n        color: white;\n        padding: 10px 20px;\n        border-radius: 4px;\n        z-index: 10000;\n    `;\n    document.body.appendChild(successMessage);\n    setTimeout(() => successMessage.remove(), 3000);\n}\n// Function to extract problem data from the page\nfunction extractProblemData() {\n    console.log('[LeetTrack] Extracting problem data...');\n    // Get problem title - try multiple selectors\n    const titleSelectors = [\n        '[data-cy=\"question-title\"]',\n        '.mr-2.text-lg',\n        'h3.text-lg',\n        '.text-title-large',\n        '[class*=\"question-title\"]',\n        // New selectors based on LeetCode's current structure\n        'div[class*=\"title\"]',\n        'h3[class*=\"title\"]',\n        'div[class*=\"problem-title\"]',\n        'h3[class*=\"problem-title\"]',\n        'div[class*=\"question-title\"]',\n        'h3[class*=\"question-title\"]',\n        // Try to find any h3 element that might contain the title\n        'h3',\n        // Try to find any div with text that looks like a problem title\n        'div[class*=\"text\"]'\n    ];\n    let title = '';\n    for (const selector of titleSelectors) {\n        const elements = document.querySelectorAll(selector);\n        console.log(`[LeetTrack] Checking title selector \"${selector}\":`, elements.length, 'elements found');\n        for (const element of elements) {\n            const text = element.textContent?.trim();\n            // Skip elements that are likely not the problem title\n            if (text &&\n                text.length > 0 &&\n                !text.includes('Submit') &&\n                !text.includes('Run') &&\n                !text.includes('Problem List') &&\n                !text.includes('Description') &&\n                !text.includes('Example') &&\n                !text.includes('Constraints') &&\n                text.length < 100) { // Problem titles are usually not very long\n                title = text;\n                console.log(`[LeetTrack] Found title using selector \"${selector}\":`, title);\n                break;\n            }\n        }\n        if (title)\n            break;\n    }\n    // Get problem ID from URL\n    const problemId = window.location.pathname.split('/')[2];\n    console.log('[LeetTrack] Problem ID:', problemId);\n    // Get difficulty - try multiple selectors\n    const difficultySelectors = [\n        '[diff]',\n        '[class*=\"difficulty\"]',\n        '[class*=\"label\"]'\n    ];\n    let difficulty = 'Easy';\n    for (const selector of difficultySelectors) {\n        const element = document.querySelector(selector);\n        const diffText = element?.textContent?.toLowerCase() || element?.getAttribute('diff')?.toLowerCase() || '';\n        if (diffText.includes('easy') || diffText.includes('medium') || diffText.includes('hard')) {\n            difficulty = difficultyMap[diffText] || 'Easy';\n            console.log(`[LeetTrack] Found difficulty using selector \"${selector}\":`, difficulty);\n            break;\n        }\n    }\n    // Get topics - try multiple selectors\n    const topicSelectors = [\n        '[data-cy=\"topic-tag\"]',\n        '[class*=\"topic-tag\"]',\n        '[class*=\"tag\"]'\n    ];\n    let topics = [];\n    for (const selector of topicSelectors) {\n        const elements = document.querySelectorAll(selector);\n        if (elements.length > 0) {\n            topics = Array.from(elements).map(el => el.textContent?.trim() || '').filter(Boolean);\n            console.log(`[LeetTrack] Found topics using selector \"${selector}\":`, topics);\n            break;\n        }\n    }\n    if (!title || !problemId) {\n        console.log('[LeetTrack] Missing required data:', { title, problemId });\n        return null;\n    }\n    const problemData = {\n        id: problemId,\n        title,\n        difficulty,\n        topics,\n        solvedAt: Date.now(),\n        status: 'solved',\n        severity: 'success'\n    };\n    console.log('[LeetTrack] Extracted problem data:', problemData);\n    return problemData;\n}\n// Function to check if problem is solved\nfunction isProblemSolved() {\n    console.log('[LeetTrack] Checking if problem is solved...');\n    // Check for submission status\n    const selectors = [\n        '.text-success', // Original selector\n        '[data-cy=\"submission-status\"]', // Submission status\n        '[data-cy=\"submission-result\"]', // Submission result\n        '.text-green-s', // Green success text\n        '.success' // Success class\n    ];\n    for (const selector of selectors) {\n        const elements = document.querySelectorAll(selector);\n        console.log(`[LeetTrack] Checking selector \"${selector}\":`, elements.length, 'elements found');\n        for (const element of elements) {\n            const text = element.textContent?.toLowerCase() || '';\n            console.log(`[LeetTrack] Element text: \"${text}\"`);\n            if (text.includes('accepted') || text.includes('success')) {\n                console.log('[LeetTrack] Found accepted/success status!');\n                return true;\n            }\n        }\n    }\n    // Check if we're on a submissions page\n    if (window.location.href.includes('/submissions/')) {\n        console.log('[LeetTrack] On submissions page, checking status...');\n        const statusElement = document.querySelector('[data-cy=\"submission-status\"]');\n        const statusText = statusElement?.textContent?.toLowerCase() || '';\n        console.log('[LeetTrack] Submission status:', statusText);\n        if (statusText.includes('accepted')) {\n            console.log('[LeetTrack] Found accepted status on submissions page!');\n            return true;\n        }\n    }\n    console.log('[LeetTrack] No solved status found');\n    return false;\n}\n// Function to handle problem submission\nfunction handleProblemSubmission() {\n    console.log('[LeetTrack] Handling problem submission...');\n    // Add a delay to ensure the page is fully loaded\n    setTimeout(() => {\n        if (isProblemSolved()) {\n            console.log('[LeetTrack] Problem is solved, extracting data...');\n            const problemData = extractProblemData();\n            if (problemData) {\n                console.log('[LeetTrack] Sending problem data to background script:', problemData);\n                try {\n                    chrome.runtime.sendMessage({ type: 'SAVE_PROBLEM', problem: problemData }, (response) => {\n                        if (chrome.runtime.lastError) {\n                            console.error('[LeetTrack] Runtime error:', chrome.runtime.lastError);\n                            showSuccessMessage('Failed to track problem. Please try again.');\n                            return;\n                        }\n                        console.log('[LeetTrack] Background script response:', response);\n                        if (response?.success) {\n                            showSuccessMessage('Problem tracked successfully!');\n                        }\n                        else {\n                            console.error('[LeetTrack] Failed to save problem:', response?.error);\n                            showSuccessMessage('Failed to track problem. Please try again.');\n                        }\n                    });\n                }\n                catch (error) {\n                    console.error('[LeetTrack] Error sending message:', error);\n                    showSuccessMessage('Failed to track problem. Please try again.');\n                }\n            }\n            else {\n                console.log('[LeetTrack] Could not extract problem data');\n            }\n        }\n        else {\n            console.log('[LeetTrack] Problem is not solved yet');\n        }\n    }, 1000); // Wait 1 second for the page to be fully loaded\n}\n// Listen for submission events\nfunction setupSubmissionListener() {\n    console.log('[LeetTrack] Setting up submission listener...');\n    // Listen for the submission button click - try multiple selectors\n    const submitButtonSelectors = [\n        '[data-cy=\"submit-code-btn\"]',\n        '[class*=\"submit\"]',\n        'button[type=\"submit\"]',\n        // New selectors based on LeetCode's current structure\n        'button[class*=\"submit\"]',\n        'button[class*=\"btn\"]',\n        'button[class*=\"button\"]',\n        // Look for any button that might be the submit button\n        'button'\n    ];\n    let submitButton = null;\n    for (const selector of submitButtonSelectors) {\n        const buttons = document.querySelectorAll(selector);\n        console.log(`[LeetTrack] Checking submit button selector \"${selector}\":`, buttons.length, 'elements found');\n        for (const button of buttons) {\n            const text = button.textContent?.toLowerCase() || '';\n            if (text.includes('submit')) {\n                submitButton = button;\n                console.log(`[LeetTrack] Found submit button using selector \"${selector}\" with text:`, text);\n                break;\n            }\n        }\n        if (submitButton)\n            break;\n    }\n    if (submitButton) {\n        submitButton.addEventListener('click', () => {\n            console.log('[LeetTrack] Submit button clicked');\n            // Wait for the submission to complete\n            setTimeout(handleProblemSubmission, 2000);\n        });\n    }\n    else {\n        console.log('[LeetTrack] Submit button not found, will retry in 1 second');\n        // Retry finding the submit button after a short delay\n        setTimeout(setupSubmissionListener, 1000);\n    }\n    // Also listen for URL changes (for when user navigates to a problem)\n    let lastUrl = location.href;\n    new MutationObserver(() => {\n        if (location.href !== lastUrl) {\n            console.log('[LeetTrack] URL changed from', lastUrl, 'to', location.href);\n            lastUrl = location.href;\n            // Check if we're on a problem page or submissions page\n            if (location.href.includes('/problems/') || location.href.includes('/submissions/')) {\n                console.log('[LeetTrack] On problem/submission page, checking status...');\n                handleProblemSubmission();\n            }\n        }\n    }).observe(document, { subtree: true, childList: true });\n    // Initial check\n    if (location.href.includes('/problems/') || location.href.includes('/submissions/')) {\n        console.log('[LeetTrack] Initial check for problem status...');\n        handleProblemSubmission();\n    }\n}\n// Initialize the content script\nconsole.log('[LeetTrack] Content script initialized');\n// Add a DOMContentLoaded listener to ensure the page is fully loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('[LeetTrack] DOM fully loaded, setting up listeners...');\n    setupSubmissionListener();\n});\n// Also set up listeners immediately in case DOMContentLoaded already fired\nsetupSubmissionListener();\n"],"names":[],"sourceRoot":""}